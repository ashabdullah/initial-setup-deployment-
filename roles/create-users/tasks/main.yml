---
#- include_vars:
#    file: '../vars/secret'

- debug: var=group_names
  when: debug_enabled_default | bool

- name: Add group | create groups before adding user to group
  group:
    name: "{{ item.0.groups }}"
    state: present
  when: item.0.groups is defined and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, groups: {{ item.0.groups if item.0.groups is defined else ''}}"

- name: Add users | create users, shell, home dirs
  user:
    name: "{{ item.0.username }}"
    password: "{{ item.0.password if item.0.password is defined else '!' }}"
    update_password: "{{ item.0.update_password if item.0.update_password is defined else default_update_password }}"
    groups: "{{ item.0.groups | default(omit) }}"
    shell: "{{ item.0.shell if item.0.shell is defined else default_shell }}"
    createhome: yes
    comment: "{{ item.0.comment if item.0.comment is defined else '' }}"
    state: present #hard-coded in case user sets state of absent. Choice made to never delete accounts!
  when: (item.0.user_state == 'present' or item.0.user_state == 'lock') and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, user_state: {{ item.0.user_state }}, password: {{ 'True' if item.0.password is defined else 'False' }}, update_password: {{ item.0.update_password if item.0.update_password is defined else default_update_password}}, groups: {{ item.0.groups if item.0.groups is defined else ''}}, servers: {{ item.1 if item.1 is defined else '' }}, group_names: {{ group_names }}"

- name: Add users | Unlock password login (set expiry to -1)
  chage:
    user: "{{ item.0.username }}"
    sp_expire: -1
#  command: chage -E -1 {{ item.username }} #unlock password authentication
  when: item.0.user_state == 'present' and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, user_state: {{ item.0.user_state }}"
- name: Lock users | Lock password & ssh key authentication
  chage:
    user: "{{ item.0.username }}"
    sp_expire: 0
#  command: chage -E 0 {{ item.0.username }} #Alternative lock password & ssh key authentication
  when: item.0.user_state == 'lock' and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, user_state: {{ item.0.user_state }}"

- name: SSH Keys | Add authorized key for ssh key authentication
  authorized_key:
    user: "{{ item.0.username }}"
    key: "{{ item.0.ssh_key }}"
    exclusive: "{{ item.0.exclusive_ssh_key if item.0.exclusive_ssh_key is defined else 'no' }}"
    state: present
  when: item.0.ssh_key is defined and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, ssh_key: {{ 'True' if item.0.ssh_key is defined else 'False' }}, exclusive_ssh_key: {{ item.0.exclusive_ssh_key if item.0.exclusive_ssh_key is defined else 'False' }}"

- name: Sudo | add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{item.0.username}} '
#    line: '{{ item.0.username }} ALL=(ALL) NOPASSWD:ALL'
    line: "{{ item.0.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.0.use_sudo_nopass|d(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.0.use_sudo|d(false)|bool == true and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, use_sudo: {{ item.0.use_sudo|d(false) }}, use_sudo_nopass: {{ item.0.use_sudo_nopass|d(false) }}"
#environment fixes Redhat issue of hard-coded path to visudo

- name: Sudo | remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.0.username }} '
    line: '{{ item.0.username }}'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.0.use_sudo|d(false)|bool == false and item.1 in group_names
  with_subelements:
    - "{{ users }}"
    - servers
  loop_control:
    label: "username: {{item.0.username}}, use_sudo: {{ item.0.use_sudo|d(false) }}"

